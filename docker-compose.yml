# docker-compose.yml
# Usando un Dockerfile multi-etapa y un archivo .env en la raíz
# --- FRONTEND Y NGINX DESACTIVADOS TEMPORALMENTE PARA PROBAR EL BACKEND ---

services:
  # # Servicio del Frontend (Next.js)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: frontend-production
  #     args:
  #       # Pasar la URL de la API como argumento en tiempo de construcción
  #       NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
  #     - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
  #   networks:
  #     - app-network
  #   depends_on:
  #     - fastapi_backend

  # Servicio del Backend (FastAPI)
  fastapi_backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-production
    restart: always
    env_file:
      - .env # Cargar variables desde el archivo .env
    ports:
      - "8000:8000" # Exponer puerto para pruebas directas
    networks:
      - app-network
    depends_on:
      - db

  # Servicio de Base de Datos (PostgreSQL + pgvector)
  db:
    image: pgvector/pgvector:pg16
    restart: always
    env_file:
      - .env # Cargar variables desde el archivo .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  # # Nginx como proxy inverso
  # nginx:
  #   image: nginx:alpine
  #   restart: always
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #   depends_on:
  #     - app
  #     - fastapi_backend
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: